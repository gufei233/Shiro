import{Commands as o,subsetToBinary as m}from"./subset-shared.chunk-DPqG_brM.js";import"./index-DryuTcf_.js";import"./index-Sggqy_9J.js";import"./index-DzLI8Ikz.js";import"./owner-D8MiYTPz.js";import"./floating-ui.react-dom-DdKxdWKK.js";import"./index-Cxpwkw4B.js";import"./useQuery-Dk3Bg579.js";import"./viewport-DpRHcmzC.js";import"./use-is-dark-CpLtdClM.js";import"./dom-BowoBODo.js";import"./helper-CB7ordUq.js";import"./lodash-BiwYnmIp.js";import"./StyledButton-BfrdzUrp.js";import"./index-DZaEvC3d.js";import"./proxy-DUugJEGE.js";import"./provider-CBZhhRno.js";import"./spring-C80N1tKa.js";import"./use-is-unmounted-Cpv1yIXF.js";import"./use-event-callback-CdfbktJf.js";import"./use-drag-controls-Dr-d8rqC.js";import"./visual-element-C9e53mhn.js";import"./index-taskAZRp.js";var M=import.meta.url?new URL(import.meta.url):void 0;typeof window>"u"&&typeof self<"u"&&(self.onmessage=async t=>{switch(t.data.command){case o.Subset:let r=await m(t.data.arrayBuffer,t.data.codePoints);self.postMessage(r,{transfer:[r]});break}});export{M as WorkerUrl};
